#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'active_support/core_ext/string/inflections'

if ARGV.size < 1
  puts "syntax: faa_nfdc_get_fixes <path-to-json-output-file>"
  exit 1
end

JSON_FILE = ARGV[0]

BASE_URL = 'https://nfdc.faa.gov/nfdcApps/controllers/PublicDataController/getLidData'
ORIGIN   = 'https://www.faa.gov'
REFERER  = 'https://www.faa.gov/'

def convert_dms_to_degrees(dms = '')
  dms.scan(/(\d+)-(\d+)-(\d+)/).map { |x,y,z| x.to_f + y.to_f/60 + z.to_f/3600 }.first
end

def decode_facility(fac = '')
  case fac
  when 'C'
    'VORTAC'
  when 'D'
    'VOR/DME'
  when 'DD'
    'LDA/DME'
  when 'LA'
    'LDA'
  when 'LC'
    'LOC'
  when 'LD'
    'ILS/DME'
  when 'LE'
    'LOC/DME'
  when 'LO'
    'LOM'
  when 'LM'
    'LMM'
  when 'LS'
    'ILS'
  when 'MS'
    'MLS'
  when 'R'
    'NDB'
  when 'RD'
    'NDB/DME'
  when 'SD'
    'SDF/DME'
  when 'SF'
    'SDF'
  when 'T'
    'TACAN'
  when 'V'
    'VOR'
  else
    fac
  end
end

def decode_description(desc = '')
  latitude = longitude = 0.0
  navaids = []

  results = []
  if desc.gsub(/(?<dms>\d+-\d+-\d+\.\d{4})(?<dir>\w)/) { |m| results << $~ }
    # DMS coordinates
    results.each do |result|
      if ['N', 'S'].include?(result[:dir])
        degrees = convert_dms_to_degrees(result[:dms]).round(6)
        latitude = degrees * (result[:dir] == 'S' ? -1 : 1)
      end
      if ['E', 'W'].include?(result[:dir])
        degrees = convert_dms_to_degrees(result[:dms]).round(6)
        longitude = degrees * (result[:dir] == 'W' ? -1 : 1)
      end
    end
  end

  results = []
  if desc.gsub(/(?<navaid>\w+)\*(?<facility>\w+)\*(?<azimuth>\d{3}\.\d{2})\/(?<distance>\d+\.\d{2})/) { |m| results << $~ }
    # navaid, facility, azimuth, distance
    results.each do |result|
      navaids.push({
        id: result[:navaid],
        facility: decode_facility(result[:facility]),
        azimuth: result[:azimuth],
        distance: result[:distance]
      })
    end
  end

  results = []
  if desc.gsub(/(?<navaid>\w+)\*(?<facility>\w+)\* \/(?<distance>\d+\.\d{2})/) { |m| results << $~ }
    # navaid, facility, azimuth, distance
    results.each do |result|
      navaids.push({
        id: result[:navaid],
        facility: decode_facility(result[:facility]),
        distance: result[:distance]
      })
    end
  end

  results = []
  if desc.gsub(/(?<navaid>\w+)\*(?<facility>\w+)\*(?<azimuth>\d{3}\.\d{2})[^\/]/) { |m| results << $~ }
    # navaid, facility, azimuth
    results.each do |result|
      navaids.push({
        id: result[:navaid],
        facility: decode_facility(result[:facility]),
        azimuth: result[:azimuth]
      })
    end
  end

  {
    latitude: latitude,
    longitude: longitude,
    navaids: navaids
  }
end

def process_data(data = [])
  data.map do |item|
    {
      id: item['fix_identifier'],
      state: item['state'] ? item['state'].titleize : nil,
      description: item['description']
    }.merge(decode_description(item['description']))
  end
end

def retrieve_page(page, count = 1000)
  uri = URI.parse(BASE_URL)
  header = {
    'Accept': 'application/json',
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    'Origin': ORIGIN,
    'Referer': REFERER,
    'Accept-Encoding': 'gzip, deflat, br',
    'User-Agent': 'Mozilla/5.0',
  }
  start = page * count
  payload = {
    'dataType': 'LIDFIXESWAYPOINTS',
    'start': start,
    'length': count,
    'sortcolumn': 'fix_identifier',
    'sortdir': 'asc',
    'searchval': ''
  }
  puts "Retrieving page #{page} (count: #{count})"
  Net::HTTP.post_form(uri, payload)
end

count = 1000
res = retrieve_page(0, count)
fixes = []
if res.code == "200"
  results = JSON.parse(res.body)
  total_records = results['totalrows']
  total_pages = total_records / count
  puts "There are #{total_records} total records, so there is #{total_pages} pages of #{count} records at a time."
  fixes += process_data(results['data'])
  puts "Retrieved #{fixes.count} records"
  # puts data.first
  for i in 1..(total_pages-1) do
    res = retrieve_page(i)
    if res.code == "200"
      fixes += process_data(res['data'])
      puts "Retrieved #{fixes.count} records"
      sleep(0.2)
    else
      puts "There was an error: #{res.code}. Exiting..."
    end
  end
else
  puts "Error: #{res.code}"
end

content = {
  source: {
    name: 'Airframes Project',
    url: 'https://github.com/airframesio',
    email: 'kevin@airframes.io'
  },
  last_updated: Time.now,
  attribution: {
    name: 'FAA NFDC',
    url: 'https://nfdc.faa.gov/nfdcApps/controllers/PublicDataController/getLidData'
  },
  count: fixes.size,
  fixes: fixes
}

File.open(JSON_FILE, 'w') do |f|
  f.write(JSON.pretty_generate(content))
end

puts "Retrieved #{fixes.size} fixes/waypoints and wrote to #{JSON_FILE}."
